# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ziivGP_0hkM_JyVtIj-9APwPSun0sIcK
"""

!pip install opencv-python-headless
!pip install torch torchvision
!pip install ultralytics

import cv2
import requests
import os
from tempfile import NamedTemporaryFile
from ultralytics import YOLO
from IPython.display import HTML
from base64 import b64encode

# Install FFmpeg (if not already installed in Colab)
!apt-get install -y ffmpeg

# Step 1: Download the video file to a temporary location
video_url = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerJoyrides.mp4"
response = requests.get(video_url, stream=True)
if response.status_code == 200:
    with NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video:
        temp_video.write(response.content)
        video_path = temp_video.name
else:
    print("Failed to download the video.")
    exit()

# Step 2: Load the video and YOLO model
video_stream = cv2.VideoCapture(video_path)
model = YOLO('yolov8n.pt')  # Load YOLO model

# Step 3: Prepare temporary directory for processed frames
os.makedirs("frames", exist_ok=True)

frame_idx = 0

# Step 4: Process video frames
while video_stream.isOpened():
    ret, frame = video_stream.read()
    if not ret:
        break

    # Perform object detection and annotate frame
    results = model(frame)
    annotated_frame = results[0].plot()

    # Save each frame as an image
    frame_path = f"frames/frame_{frame_idx:04d}.jpg"
    cv2.imwrite(frame_path, annotated_frame)
    frame_idx += 1

video_stream.release()

# Step 5: Use FFmpeg to combine frames into a video
output_path = "annotated_video.mp4"
fps = int(video_stream.get(cv2.CAP_PROP_FPS)) or 25  # Default to 25 FPS if FPS is unavailable
!ffmpeg -framerate {fps} -i frames/frame_%04d.jpg -c:v libx264 -pix_fmt yuv420p {output_path}

# Step 6: Display the annotated video in Colab
def show_video(video_path):
    video_data = open(video_path, "rb").read()
    video_base64 = b64encode(video_data).decode()
    video_html = f"""
    <video width="640" height="480" controls>
        <source src="data:video/mp4;base64,{video_base64}" type="video/mp4">
    </video>
    """
    return HTML(video_html)

# Display the final video
show_video(output_path)

